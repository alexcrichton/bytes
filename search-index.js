var searchIndex = {};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[11,"partial_cmp","byteorder","",0,null],[11,"eq","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bigendian"}}],[11,"partial_cmp","","",1,null],[11,"eq","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",0,null],[11,"read_u32","","",0,null],[11,"read_u64","","",0,null],[11,"read_uint","","",0,null],[11,"write_u16","","",0,null],[11,"write_u32","","",0,null],[11,"write_u64","","",0,null],[11,"write_uint","","",0,null],[11,"read_u16","","",1,null],[11,"read_u32","","",1,null],[11,"read_u64","","",1,null],[11,"read_uint","","",1,null],[11,"write_u16","","",1,null],[11,"write_u32","","",1,null],[11,"write_u64","","",1,null],[11,"write_uint","","",1,null],[8,"ByteOrder","bytes","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",null,null],[3,"Bytes","","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a continuous slice of memory.",null,null],[11,"into_buf","collections::vec","",3,null],[11,"into_buf","collections::string","",4,null],[11,"copy_to_buf","collections::vec","",3,null],[11,"copy_to_buf","collections::string","",4,null],[11,"copy_to_buf","bytes","",5,null],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,null],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,null],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,null],[11,"limit","","Returns the maximum number of bytes that can be read.",6,null],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,null],[11,"remaining","","",6,null],[11,"bytes","","",6,null],[11,"advance","","",6,null],[11,"get_ref","","Gets a reference to the underlying `Buf`.",7,null],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",7,null],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",7,null],[11,"read","","",7,null],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",8,null],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",8,null],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",8,null],[11,"write","","",8,null],[11,"flush","","",8,null],[11,"remaining","std::io::cursor","",9,null],[11,"bytes","","",9,null],[11,"advance","","",9,null],[11,"remaining_mut","","",9,null],[11,"advance_mut","","Advance the internal cursor of the BufMut",9,null],[11,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and `BufMut::remaining()`.",9,null],[11,"remaining_mut","collections::vec","",3,null],[11,"advance_mut","","",3,null],[11,"bytes_mut","","",3,null],[11,"new","bytes","Creates a new empty `Bytes`",5,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",5,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",5,null],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",5,null],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",5,null],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",5,null],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",5,null],[11,"split_off","","Splits the bytes into two at the given index.",5,null],[11,"drain_to","","Splits the bytes into two at the given index.",5,null],[11,"try_mut","","Attempt to convert into a `BytesMut` handle.",5,null],[11,"into_buf","","",5,null],[11,"clone","","",5,null],[11,"as_ref","","",5,null],[11,"deref","","",5,null],[11,"from","","",5,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"from","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"bytes"}}],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","",5,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"borrow","","",5,null],[11,"with_capacity","","Create a new `BytesMut` with the specified capacity.",10,{"inputs":[{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",10,null],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",10,null],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",10,null],[11,"freeze","","Convert `self` into an immutable `Bytes`",10,null],[11,"split_off","","Splits the bytes into two at the given index.",10,null],[11,"drain","","Remove the bytes from the current view, returning them in a new\n`BytesMut` handle.",10,null],[11,"drain_to","","Splits the buffer into two at the given index.",10,null],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the\nrest.",10,null],[11,"clear","","Clears the buffer, removing all data.",10,null],[11,"set_len","","Sets the length of the buffer",10,null],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\ninto the given `BytesMut`.",10,null],[11,"remaining_mut","","",10,null],[11,"advance_mut","","",10,null],[11,"bytes_mut","","",10,null],[11,"put_slice","","",10,null],[11,"into_buf","","",10,null],[11,"as_ref","","",10,null],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"bytesmut"}}],[11,"from","","",10,{"inputs":[{"name":"string"}],"output":{"name":"bytesmut"}}],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"bytesmut"}}],[11,"from","","",10,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesmut"}}],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"cmp","","",10,null],[11,"fmt","","",10,null],[11,"hash","","",10,null],[11,"borrow","","",10,null],[11,"write_str","","",10,null],[11,"write_fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"eq","collections::vec","",3,null],[11,"partial_cmp","","",3,null],[11,"eq","bytes","",10,null],[11,"partial_cmp","","",10,null],[11,"eq","collections::string","",4,null],[11,"partial_cmp","","",4,null],[11,"eq","bytes","",10,null],[11,"partial_cmp","","",10,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","collections::vec","",3,null],[11,"partial_cmp","","",3,null],[11,"eq","bytes","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","collections::string","",4,null],[11,"partial_cmp","","",4,null],[11,"eq","bytes","",5,null],[11,"partial_cmp","","",5,null],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of\nthe buffer.",11,null],[10,"bytes","","Returns a slice starting at the current position and of length between 0\nand `Buf::remaining()`.",11,null],[10,"advance","","Advance the internal cursor of the Buf",11,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",11,null],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",11,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",11,null],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",11,null],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",11,null],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",11,null],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",11,null],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",11,null],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",11,null],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",11,null],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",11,null],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",11,null],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in the specified byte order.",11,null],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in the specified byte order.",11,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",11,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Buf`.",11,null],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",11,null],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached.",12,null],[10,"advance_mut","","Advance the internal cursor of the BufMut",12,null],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",12,null],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and `BufMut::remaining_mut()`.",12,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.",12,null],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.",12,null],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",12,null],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",12,null],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",12,null],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",12,null],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",12,null],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",12,null],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",12,null],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",12,null],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in the specified byte order.",12,null],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in the specified byte order.",12,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `BufMut`.",12,null],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",12,null],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",13,null],[10,"into_buf","","Creates a `Buf` from a value.",13,null],[8,"Source","","A value that writes bytes from itself into a `BufMut`.",null,null],[10,"copy_to_buf","","Copy data from self into destination buffer",14,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",11,null],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",11,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",11,null],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",11,null],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",11,null],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",11,null],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",11,null],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",11,null],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",11,null],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",11,null],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",11,null],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",11,null],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from\n`self` in the specified byte order.",11,null],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from\n`self` in the specified byte order.",11,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",11,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Buf`.",11,null],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",11,null],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",12,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.",12,null],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the\nnumber of bytes written.",12,null],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",12,null],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",12,null],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",12,null],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",12,null],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",12,null],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",12,null],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",12,null],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",12,null],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to\n`self` in the specified byte order.",12,null],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to\n`self` in the specified byte order.",12,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `BufMut`.",12,null],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",12,null]],"paths":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"],[3,"Vec"],[3,"String"],[3,"Bytes"],[3,"Take"],[3,"Reader"],[3,"Writer"],[3,"Cursor"],[3,"BytesMut"],[8,"Buf"],[8,"BufMut"],[8,"IntoBuf"],[8,"Source"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"partial_cmp","","",3,null],[11,"eq","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"partial_cmp","","",4,null],[11,"eq","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
